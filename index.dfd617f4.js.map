{"mappings":"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","sources":["src/metaballs.js"],"sourcesContent":["var canvas = document.createElement(\"canvas\");\nvar width = canvas.width = window.innerWidth * 0.75;\nvar height = canvas.height = window.innerHeight * 0.75;\ndocument.body.appendChild(canvas);\nvar gl = canvas.getContext('webgl');\n\nvar mouse = {x: 0, y: 0};\n\nvar numMetaballs = 30;\nvar metaballs = [];\n\nfor (var i = 0; i < numMetaballs; i++) {\n  var radius = Math.random() * 60 + 10;\n  metaballs.push({\n    x: Math.random() * (width - 2 * radius) + radius,\n    y: Math.random() * (height - 2 * radius) + radius,\n    vx: (Math.random() - 0.5) * 3,\n    vy: (Math.random() - 0.5) * 3,\n    r: radius * 0.75\n  });\n}\n\nvar vertexShaderSrc = `\nattribute vec2 position;\n\nvoid main() {\n// position specifies only x and y.\n// We set z to be 0.0, and w to be 1.0\ngl_Position = vec4(position, 0.0, 1.0);\n}\n`;\n\nvar fragmentShaderSrc = `\nprecision highp float;\n\nconst float WIDTH = ` + (width >> 0) + `.0;\nconst float HEIGHT = ` + (height >> 0) + `.0;\n\nuniform vec3 metaballs[` + numMetaballs + `];\n\nvoid main(){\nfloat x = gl_FragCoord.x;\nfloat y = gl_FragCoord.y;\n\nfloat sum = 0.0;\nfor (int i = 0; i < ` + numMetaballs + `; i++) {\nvec3 metaball = metaballs[i];\nfloat dx = metaball.x - x;\nfloat dy = metaball.y - y;\nfloat radius = metaball.z;\n\nsum += (radius * radius) / (dx * dx + dy * dy);\n}\n\nif (sum >= 0.99) {\ngl_FragColor = vec4(mix(vec3(x / WIDTH, y / HEIGHT, 1.0), vec3(0, 0, 0), max(0.0, 1.0 - (sum - 0.99) * 100.0)), 1.0);\nreturn;\n}\n\ngl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n}\n\n`;\n\nvar vertexShader = compileShader(vertexShaderSrc, gl.VERTEX_SHADER);\nvar fragmentShader = compileShader(fragmentShaderSrc, gl.FRAGMENT_SHADER);\n\nvar program = gl.createProgram();\ngl.attachShader(program, vertexShader);\ngl.attachShader(program, fragmentShader);\ngl.linkProgram(program);\ngl.useProgram(program);\n\nvar vertexData = new Float32Array([\n  -1.0,  1.0, // top left\n  -1.0, -1.0, // bottom left\n  1.0,  1.0, // top right\n  1.0, -1.0, // bottom right\n]);\nvar vertexDataBuffer = gl.createBuffer();\ngl.bindBuffer(gl.ARRAY_BUFFER, vertexDataBuffer);\ngl.bufferData(gl.ARRAY_BUFFER, vertexData, gl.STATIC_DRAW);\n\nvar positionHandle = getAttribLocation(program, 'position');\ngl.enableVertexAttribArray(positionHandle);\ngl.vertexAttribPointer(positionHandle,\n                       2, // position is a vec2\n                       gl.FLOAT, // each component is a float\n                       gl.FALSE, // don't normalize values\n                       2 * 4, // two 4 byte float components per vertex\n                       0 // offset into each span of vertex data\n                      );\n\nvar metaballsHandle = getUniformLocation(program, 'metaballs');\n\nloop();\nfunction loop() {\n  for (var i = 0; i < numMetaballs; i++) {\n    var metaball = metaballs[i];\n    metaball.x += metaball.vx;\n    metaball.y += metaball.vy;\n\n    if (metaball.x < metaball.r || metaball.x > width - metaball.r) metaball.vx *= -1;\n    if (metaball.y < metaball.r || metaball.y > height - metaball.r) metaball.vy *= -1;\n  }\n\n  var dataToSendToGPU = new Float32Array(3 * numMetaballs);\n  for (var i = 0; i < numMetaballs; i++) {\n    var baseIndex = 3 * i;\n    var mb = metaballs[i];\n    dataToSendToGPU[baseIndex + 0] = mb.x;\n    dataToSendToGPU[baseIndex + 1] = mb.y;\n    dataToSendToGPU[baseIndex + 2] = mb.r;\n  }\n  gl.uniform3fv(metaballsHandle, dataToSendToGPU);\n  \n  //Draw\n  gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n\n  requestAnimationFrame(loop);\n}\n\nfunction compileShader(shaderSource, shaderType) {\n  var shader = gl.createShader(shaderType);\n  gl.shaderSource(shader, shaderSource);\n  gl.compileShader(shader);\n\n  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {\n    throw \"Shader compile failed with: \" + gl.getShaderInfoLog(shader);\n  }\n\n  return shader;\n}\n\nfunction getUniformLocation(program, name) {\n  var uniformLocation = gl.getUniformLocation(program, name);\n  if (uniformLocation === -1) {\n    throw 'Can not find uniform ' + name + '.';\n  }\n  return uniformLocation;\n}\n\nfunction getAttribLocation(program, name) {\n  var attributeLocation = gl.getAttribLocation(program, name);\n  if (attributeLocation === -1) {\n    throw 'Can not find attribute ' + name + '.';\n  }\n  return attributeLocation;\n}\n\ncanvas.onmousemove = function(e) {\n  mouse.x = e.clientX;\n  mouse.y = e.clientY;\n}"],"names":["$e3fb86e4809f724e$var$canvas","document","createElement","$e3fb86e4809f724e$var$width","width","window","innerWidth","$e3fb86e4809f724e$var$height","height","innerHeight","body","appendChild","$e3fb86e4809f724e$var$gl","getContext","$e3fb86e4809f724e$var$mouse","x","y","$e3fb86e4809f724e$var$metaballs","$e3fb86e4809f724e$var$i","$e3fb86e4809f724e$var$radius","Math","random","push","vx","vy","r","$e3fb86e4809f724e$var$fragmentShaderSrc","$e3fb86e4809f724e$var$vertexShader","$e3fb86e4809f724e$var$compileShader","VERTEX_SHADER","$e3fb86e4809f724e$var$fragmentShader","FRAGMENT_SHADER","$e3fb86e4809f724e$var$program","createProgram","attachShader","linkProgram","useProgram","$e3fb86e4809f724e$var$vertexData","Float32Array","$e3fb86e4809f724e$var$vertexDataBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","STATIC_DRAW","$e3fb86e4809f724e$var$positionHandle","program2","name","attributeLocation","getAttribLocation","$e3fb86e4809f724e$var$getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","FALSE","$e3fb86e4809f724e$var$metaballsHandle","program1","uniformLocation","getUniformLocation","$e3fb86e4809f724e$var$getUniformLocation","shaderSource","shaderType","shader","createShader","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","$e3fb86e4809f724e$var$loop","i1","metaball","dataToSendToGPU","baseIndex","mb","uniform3fv","drawArrays","TRIANGLE_STRIP","requestAnimationFrame","onmousemove","e","clientX","clientY"],"version":3,"file":"index.dfd617f4.js.map"}